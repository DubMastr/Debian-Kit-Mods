#!/bin/sh
PATH=/bin:/usr/bin:/usr/local/bin ; export PATH 
PATH=/bin:/usr/bin:/usr/local/xbin ; export PATH 
umask 022 		# Files that the script creates will have 755 permission.
# Thanks to Ian D. Allen, for this tip.
echo "This script is ment to run with the : Android Terminal emulater : app and : Busybox"
echo "setting variables..."
echo "...date and time..."
curentDate=$(date +"%m %d %Y")
curentTime=$(date +"%H %M")
echo "...Android file paths..."
pathTo_root=${ANDROID_DATA:-/data}/local
pathTo_mnt=${ANDROID_DATA:-/data}/local/mnt
pathTo_SDcard=${EXTERNAL_STORAGE:-/sdcard}
echo "...IP addresses..."
IP_inet_addr=`ifconfig | grep -E 'inet addr' | grep -v '127.0.0.1' | awk '{gsub("addr:",""); print $2}'`
IP_Bcast_addr=`ifconfig | grep -E 'Bcast' | grep -v '127.0.0.1' | awk '{gsub("Bcast:",""); print $3}'`
IP_Mask_addr=`ifconfig | grep -E 'Mask' | grep -v '127.0.0.1' | awk '{gsub("Mask:",""); print $4}'`
IP_inet6_addr=`ifconfig | grep -E 'inet6 addr' | grep -v '127.0.0.1' | grep -v '1/128' | awk '{gsub("addr:",""); print $2}'`
IP_local=`ifconfig | grep -E 'inet addr' | grep -E '127.0.0.1' | awk '{gsub("addr:",""); print $2}'`
echo "...IP scanning..."
trimIP=`ifconfig | grep -E 'Bcast' | grep -v '127.0.0.1' | awk '{gsub("Bcast:",""); print $3}' | sed 's/...$//'`
echo "\$trimIP is : $trimIP"
echo -n "Please state the lowest number you wish to scan (min is 1) : "
read IPmin
echo "$IPmin : recieved"
echo -n "Please state the highest number you wish to scan (max is 254) : "
read IPmax
echo "$IPmax : recived"
customPinger=`for ip in $(seq $IPmin $IPmax) ;do (ping -c 1 -w 5 $trimIP$ip >/dev/null && echo "$trimIP$ip" &) ; done`
trimRoute=`route -n | grep -E 'UG' | awk '{print $2}'`
echo "...web addresses..."
SASgit_Mods=https://github.com/S0AndS0/Debian-Kit-Mods
echo "setting user defined variables"
echo -n "Please input your Linux username (root is ok) : "
read linuxUser
echo -n "Please input : local : or : remote : to choose what Linux device to send files to (remote requires that the device have Linux with a ssh server running on the same wifi network) : "
read localRemote_IP
if [ $localRemote_IP = local ]
then
	echo "$localRemote_IP : recived. Using : $IP_local : for sending commands to your Linux OS"
	confermed_IP=$IP_local
elif [ $localRemote_IP = remote ]
then
	echo "$localRemote_IP : recived. Using : $trimIP : and some clever : ping : commands to find your remote device..."
	$customPinger
	echo "We should see your IP, the IP of your access point, and one or more IPs"
	echo "Using : grep : clean up the list some"
	$customPinger | grep -V '$trimRoute' | grep -V '$IP_local'
	echo "Which should result in far fewer results"
	echo -n "What is the exsact IP address to the device you want to connect to? "
	read ui_IPremote
	confermed_IP=$ui_IPremote
	echo "$ui_IPremote : recieved and saved to : \$confermed_IP : $confermed_IP"
# confermed_IP=	
else [ $localRemote_IP = * ]
	echo "recived : $localRemote_IP : which does not seem right"
	echo "setting \$localRemote_IP to : local : by default and continuing"
	confermed_IP=$IP_local
fi
linuxSSH_login=$linuxUser@$confermed_IP
echo "end of variable assiginment"
echo "___________________"
echo "reading out variables"
echo "\$curentDate for android is: $curentDate : month day year"
echo "\$curentTime for android is: $curentTime : hour minuet"
echo "\$pathTo_root for android is: $pathTo_root"
echo "\$pathTo_mnt for android is: $pathTo_mnt"
echo "\$pathTo_SDcard for android is: $pathTo_SDcard"
echo "\$IP_inet_addr : is your IP for internet connections usually which is : $IP_inet_addr"
echo "\$IP_Bcast_addr : is your broadcast address which is : $IP_Bcast_addr"
echo "\$IP_Mask_addr : is your network mask which is : $IP_Mask_addr"
echo "\$IP_inet6_addr : is your IP version 6 address which is : $IP_inet6_addr"
echo "\$IP_local : is your devices local IP which is : $IP_local"
echo "\$trimIP is a trimed version of your broadcast address used for pinging for other devices on your wifi network : $trimIP"
echo "\$linuxUser : set to : $linuxUser"
echo "\$localRemote_IP : set to : $localRemote_IP"
echo "\$trimIP : set to : $trimIP : for scaning your network"
echo "\$IPmin : set to : $IPmin : for scaning your network"
echo "\$IPmax : set to : $IPmax : for scaning your network"
echo "\$confermed_IP : set to : $confermed_IP for connecting to remote"
echo "\$linuxSSH_login : set to : $linuxSSH_login : for sending commands"
echo "___________________"
# prompt to continue
echo "This script should be run on your Android terminal emulator"
echo "and not under the Linux terminal."
echo "This script will handle the syncing of your Android and Linux clocks"

echo "and update the : hostname : file under : etc : directory"

echo "___________________"
echo "Input one of the following to run all or part of setup."
echo "     dateTime : to only update Linux clock from Android clock"
echo "     linuxModer : to grab a script pack I am writing to make modding your Linux OS easier from : $SASgit_Mods : to your Linux user : $linuxUser"
echo "     all : to run all available mods"
echo "___________________"
echo "Note to users : The options that are tabbed in are not functioning just yet. The options that are not tabbed in are ready for testing."
echo "___________________"
echo -n "Please input one of the above options to continue or : q : to exit this script : "
read Deb_Responce
echo "$Deb_Responce recieved. Taking actions in 3...2..1. " && sleep 3

echo "___________________"
if [ $Deb_Responce = dateTime ] 
then 
# do something
	echo "$Deb_Responce recieved. Taking actions in 3...2..1. " && sleep 3
	echo "not writen up check back in a few hours for updates"
	echo exit

elif [ $Deb_Responce = linuxModer ] 
then 
	echo "$Deb_Responce recieved. Taking actions in 3...2..1. " && sleep 3
	echo "This will send a list of commands to your : $linuxSSH_login"
	echo "commands that will be run : sudo apt-get -y install git && sleep 3 && mkdir -p ARM_Mods && cd ARM_Mods && git clone https://github.com/S0AndS0/Debian-Kit-Mods && sh Debian-Kit-Mods/ARM_Linux_Moder" && sleep 3
cat > 
#	scp -v $linuxSSH_login "sudo apt-get -y install git && sleep 3 && mkdir -p ARM_Mods && cd ARM_Mods && git clone https://github.com/S0AndS0/Debian-Kit-Mods && sh Debian-Kit-Mods/ARM_Linux_Moder"
elif [ $Deb_Responce = all ] 
then 
# do something
	echo "$Deb_Responce recieved. Taking actions in 3...2..1. " && sleep 3

	echo "__________________"
	echo "Running : linuxModer : commands"
	echo "commands that will be run : sudo apt-get -y install git && sleep 3 && mkdir -p ARM_Mods && cd ARM_Mods && git clone https://github.com/S0AndS0/Debian-Kit-Mods && sh Debian-Kit-Mods/ARM_Linux_Moder" && sleep 3
#	ssh -v $linuxSSH_login "sudo apt-get -y install git && sleep 3 && mkdir -p ARM_Mods && cd ARM_Mods && git clone https://github.com/S0AndS0/Debian-Kit-Mods && sh Debian-Kit-Mods/ARM_Linux_Moder"

elif [ $Deb_Responce = q ] then
then
	echo "$Deb_Responce recieved. Taking actions in 3...2..1. " && sleep 3
	echo exit 
	exit
else [ $Deb_Responce = * ] 
# if anything else then exit 
	echo "bad input recived exiting now"
	echo exit 
	exit 
fi
echo "___________________"

echo exit
# example scp command
# scp source_file_name username@destination_host:destination_folder
# example scp command : -v : is verbose ... : -p : show estemated time ... : -C : uses compression on non-compressed files ... : -P : customizes the port to be used in connnection ... : -r : When the copy process is done, at the destination server you will found a directory named “documents” with all it’s files.
# scp -Cvp -P 22 source_file_name username@destination_host:destination_folder
# example : login to remote with : -l : option (note you can logout with : exit )
# ssh -l username remote-server
# example : send : ls : command to remote and : -v : option is to be verbose about it
# ssh -v user@remote-host "ls test"
# example file not found
# [ -f /tmp/foo.txt ] || echo "File not found!"

