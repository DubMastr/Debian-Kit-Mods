#!/bin/bash
PATH=/bin:/usr/bin:/usr/local/bin ; export PATH 
umask 022
# Variables
 : ${USER?} ${HOME?} 
# find the name of this script and store it to a variable
cpuM_fullScriptPath="$(readlink -f $0)"
# deleat last componit from ThisScript and store to another variable
cpuM_ScriptDirectory="$(dirname $cpuM_fullScriptPath)"
fBatteryTemp=`dmesg | grep -E 'BATT' | awk '{gsub("Temp:""","");print $7}' | sed 's/.$//' | tail -1`
fUSB=`dmesg | grep -E 'usb' | grep -v 'off'`

mineAddress=pit.deepbit.net
default_cpuM_threadCount=1
default_cflag=-O3


# web addresses
sourceInfo_Link=http://linuxclues.blogspot.com/2013/08/cpuminer-build-source-debian-litecoin.html
sourceInfo_Link2=http://www.jerri.de/blog/archives/2006/05/02/scripting_screen_for_fun_and_profit/
sourceInfo_Link3=https://litecoin.info/Mining_hardware_comparison

sourceDownload_cpuminer=https://github.com/pooler/cpuminer
# functions user prompts

promptTo_continue () { 
read -r -p "Are you sure? [Y/n]" response
case "$response" in
	[yY][eE][sS]|[yY])
 # if yes, then start risking changes
		;;
	*)
 #		 Otherwise exit..
	echo "Try again? exiting.."
	exit 
	;;
esac
} 
setUserAcount_settings () { 
	echo -n "Input your $mineAddress worker's username : "
	read ui_mineAddress_username
	echo -n "Input your $mineAddress port [default was 8332] : "
	read ui_mineAddress_port
	echo -n "Input your $ui_mineAddress_username password : "
	read ui_mineAddress_password
}
ui_rootNOroot () { 
read -r -p "Are you running as root right now? [Y/n]" response
case "$response" in
	[yY][eE][sS]|[yY])
 # if yes, use apt-get for installs
 		ui_aptgetSudo="apt-get"
 		ui_conf_="./"
 		ui_teeFile="tee -a"
		;;
	*)
 #		 Otherwise use sudo apt-get for installs..
	ui_aptgetSudo="sudo apt-get"
	ui_conf_="sudo ./"
	ui_teeFile="sudo tee -a"
	;;
esac
} 
setDownload_Directory () { 
	echo "Use - home - to download to : $HOME"
	echo "Use - download - to download to : $HOME/Download"
	echo "Use - here - to download to : $cpuM_ScriptDirectory"
	echo -n "Input the directory you wish to use: "
	read ui_setDownload_Directory
	if [ $ui_setDownload_Directory = home ]
	then
		ui_Download_Directory=$HOME
		echo "$ui_Download_Directory"
	elif [ $ui_setDownload_Directory = download ]
	then 
		mkdir -p $HOME/Download
		ui_Download_Directory=$HOME/Download
		echo "$ui_Download_Directory"
	elif [ $ui_setDownload_Directory = here ]
	then 
		ui_Download_Directory=$cpuM_ScriptDirectory
		echo "$ui_Download_Directory"
	else [ $ui_setDownload_Directory = * ]
		echo "Invalid input recived, exiting now..."
		exit
	fi
} 

setMake_Config () { 
	echo "When using the : make : command to install these programs to your Linux system running : configure : is a must to get the best performance."
	echo "I found running configure with : CFLAGS=\"-O3 -mfpu=neon\" : on ARM soft float, prvided by Debian Kit, to work well."
	echo "Others have found the following to work for thier systems..."
	echo "on ~ 						Soft Float"
	echo "	CFLAGS=\"-O3\""
	echo "on ~						Debian 7 armhf - Samsung Galaxy S II, Debian 6 armel myTouch 3G slide"
	echo	"CFLAGS=\"-O3 -mfpu=neon\""
	echo "ARM Cortex-A9 (L2=1MiB) 	Linaro Ubuntu LIB-12.09.6A, Freescale i.MX6 Quad, Sabre-Lite Board"
	echo "	CFLAGS=\"-O2\""
	echo "ARM Cortex-A15 				ChrUbuntu 12.04, Samsung Chromebook XE303C12"
	echo "	CFLAGS=\"-O3 -mfpu=neon-vfpv4\""
	echo "You may now choose one of those options. Note that the default is : $default_cflag"
	echo "_________"
	echo "Input - 1 - to run : ./configure CFLAGS=\"-O3\""
	echo "Input - 2 - to run : ./configure CFLAGS=\"-O3 -mfpu=neon\""
	echo "Input - 3 - to run : ./configure CFLAGS=\"-O3 -mfpu=neon-vfpv4\""
	echo -n "Please input a number now - "
	read ui_cflag
	if [ $ui_cflag = 1 ]
	then
		ui_cflag="-O3"
	elif [ $ui_cflag = 2 ]
	then
		ui_cflag="-O3 -mfpu=neon"
	elif [ $ui_cflag = 3 ]
	then
		ui_cflag="-O3 -mfpu=neon-vfpv4"
	else [ $ui_cflag = * ]
		ui_cflag="-O3"
		echo "Invalid input recived, using defaults..."
	fi
	echo "configure set to use : $ui_cflag"
} 

setOptions_cpuminerRun () { 
	echo "There are many options that can be set to run and checking : ./minerd -h : is a great way to find more."
	echo "For now this script will display the following usefull options..."
	echo "	-x, --proxy=[PROTOCOL://]HOST[:PORT] connect through a proxy"
	echo "	-t, --threads=N number of miner threads (default: number of processors)"
	echo "	-O, --userpass=U:P username:password pair for mining server"
	echo ""
	echo "	-o : pool to connect to"
	echo "	-u : your worker name in that pool"
	echo "	-p : password for that worker"
	echo ""
	echo "A compleat working example bassed off your inputs can be found bellow..."
	echo "	./minerd -t $default_cpuM_threadCount -o $mineAddress:$ui_mineAddress_port -u $ui_mineAddress_username -p $ui_mineAddress_password"
	echo "How many processores are you using for mining today?"
	echo -n "Don't choose more than what your system has [1 2 3..]? "
	read ui_cpuM_threadCount
	default_cpuM_threadCount=$ui_cpuM_threadCount
} 
androidSafties () { 
	echo "If your running this script on Android running Linux then battery/CPU temp will nead to be monitored by you."
	echo "This script will atempt to help with keeping your battery temp down by killing the screen running cpuminer software and restart the services automaticly when the battery's temp has gone down again."
	echo "To do this the following variable \$fBatteryTemp : $fBatteryTemp : should have an output showing. Continue only if this is true!"
	promptTo_continue
	
#	$fBatteryTemp
	
} 

screenSetting () { 
	
#	screen command examples
# start a screen session under a given name and send a command to that newly created terminal within that screen
screen -mS testName echo "hello $USER"
# start a screen session under a given name and send a command to that newly created terminal within that screen and emidieatly detach it so the curent session remains in user view
screen -mSd testName echo "hello $USER"

# reatach with a virtical split
screen -r testName -X V
# reatach with a horizontal split
screen -r testName -X S

# end a screen and it's processes from outside the above screen name
screen -r testName -X quit
	
} 

# functions - fixed and compiled

dependsInstall_cpuminer () { 
	$ui_aptgetSudo -yq install automake
	$ui_aptgetSudo -yq install pkg-config
	$ui_aptgetSudo -yq install gcc
	$ui_aptgetSudo -yq install make
	$ui_aptgetSudo -yq install libcurl3-gnutls-dev 
} 
dependsInstall_script () { 
	$ui_aptgetSudo -yq install screen
} 

mine_with_cpuminer () { 
	cd $ui_Download_Directory
	git clone $sourceDownload_cpuminer
	cd $ui_Download_Directory/cpuminer
	$ui_conf_autogen.sh
	$ui_conf_configure CFLAGS="$ui_cflag"
	make
	echo "About to start mining using the following"
	
	echo "	./minerd -t $default_cpuM_threadCount -o $mineAddress:$ui_mineAddress_port -u $ui_mineAddress_username -p $ui_mineAddress_password -D"
	promptTo_continue
	./minerd --no-longpoll -a sha256d -t $default_cpuM_threadCount -o $mineAddress:$ui_mineAddress_port -u $ui_mineAddress_username -p $ui_mineAddress_password -D
	# ./minerd --no-longpoll -a sha256d -t $default_cpuM_threadCount --url http://pit.deepbit.net:8332 --userpass $ui_mineAddress_username:$ui_mineAddress_password
	
	cd ~
}

# script run start

# script run end
echo "End of script, exiting now..."
exit
# Credits

#	thanks should be given to the following link's auther for writing an easy to follow guide that works on all platforms and for being helpful even after posting :-)
http://linuxclues.blogspot.com/2013/08/cpuminer-build-source-debian-litecoin.html

# examples

http://unix.stackexchange.com/questions/74874/pkill-cant-kill-processes-with-parent-process-id-1
# to kill an unresponcive background task use the following
pkill -SIGKILL minerd
# 	to find tasks to kill use the : ps : or : top : commands

#	screen command examples
# start a screen session under a given name and send a command to that newly created terminal within that screen
screen -mS testName echo "hello $USER"
# start a screen session under a given name and send a command to that newly created terminal within that screen and emidieatly detach it so the curent session remains in user view
screen -mSd testName echo "hello $USER"

# reatach with a virtical split
screen -r testName -X V
# reatach with a horizontal split
screen -r testName -X S

# end a screen and it's processes from outside the above screen name
screen -r testName -X quit


#	minerd options:
# mine with -D (degugging) to show more info
./minerd -o stratum+tcp://stratum.give-me-ltc.com:3334 -u worker -p password -D

-o : pool to connect to
-u : your worker name in that pool
-p : password for that worker

#	The usage options:
-a, --algo=ALGO specify the algorithm to use
-o, --url=URL URL of mining server
-O, --userpass=U:P username:password pair for mining server
-u, --user=USERNAME username for mining server
-p, --pass=PASSWORD password for mining server
--cert=FILE certificate for mining server using SSL
-x, --proxy=[PROTOCOL://]HOST[:PORT] connect through a proxy
-t, --threads=N number of miner threads (default: number of processors)
-r, --retries=N number of times to retry if a network call fails
(default: retry indefinitely)
-R, --retry-pause=N time to pause between retries, in seconds (default: 30)
-T, --timeout=N timeout for long polling, in seconds (default: none)
-s, --scantime=N upper bound on time spent scanning current work when
long polling is unavailable, in seconds (default: 5)
--no-longpoll disable X-Long-Polling support
--no-stratum disable X-Stratum support
--no-redirect ignore requests to change the URL of the mining server
-q, --quiet disable per-thread hashmeter output
-D, --debug enable debug output
-P, --protocol-dump verbose dump of protocol-level activities
-S, --syslog use system log for output messages
-B, --background run the miner in the background
--benchmark run in offline benchmark mode
-c, --config=FILE load a JSON-format configuration file
-V, --version display version information and exit.
-h, --help display this help text and exit.


http://webcache.googleusercontent.com/search?q=cache:EiHbDpksWkAJ:https://bitcointalk.org/index.php%3Ftopic%3D55038.0+&cd=1&hl=en&ct=clnk&gl=us
Q: What's the difference between the two available algorithms, scrypt and sha256d?
A: They are completely different proof-of-work algorithms. 
You must use scrypt for Litecoin, and you must use sha256d for Bitcoin. 
The default algorithm is scrypt, 
so for Bitcoin mining you have to specify --algo=sha256d


