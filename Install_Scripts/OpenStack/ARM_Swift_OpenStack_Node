#!/bin/bash
PATH=/bin:/usr/bin:/usr/local/bin ; export PATH 
umask 022 		
# Files that the script creates will have 755 permission.
# Thanks to Ian D. Allen, for this tip.
# variables auto
# find the name of this script and store it to a variable
osCN_fullScriptPath="$(readlink -f $0)"
# deleat last componit from ThisScript and store to another variable
osCN_ScriptDirectory="$(dirname $osCN_fullScriptPath)"

IP_inet_addr=`/sbin/ifconfig | grep -E 'inet addr' | grep -v '127.0.0.1' | awk '{gsub("addr:",""); print $2}'`
IP_Bcast_addr=`/sbin/ifconfig | grep -E 'Bcast' | grep -v '127.0.0.1' | awk '{gsub("Bcast:",""); print $3}'`
IP_Mask_addr=`/sbin/ifconfig | grep -E 'Mask' | grep -v '127.0.0.1' | awk '{gsub("Mask:",""); print $4}'`
IP_inet6_addr=`/sbin/ifconfig | grep -E 'inet6 addr' | grep -v '127.0.0.1' | grep -v '1/128' | awk '{gsub("addr:",""); print $2}'`
IP_local=`/sbin/ifconfig | grep -E 'inet addr' | grep -E '127.0.0.1' | awk '{gsub("addr:",""); print $2}'`
trimIP=`$IP_Bcast_addr | sed 's/...$//'`
trimRoute=`route -n | grep -E 'UG' | awk '{print $2}'`
IPmin=1
IPmax=254
customPinger=`for ip in $(seq $IPmin $IPmax) ;do (ping -c 1 -w 5 $trimIP$ip >/dev/null && echo "$trimIP$ip" &) ; done`
fLive_IPs=`$customPinger | grep -v '$trimRoute' | grep -v '$IP_inet_addr'`
echo "Setting up functions for this script..."
part00_readme () { 
	echo "_________00.1"
	echo "This script was made possible by the following links"
	echo "http://blog.adityapatawari.com/2014/01/openstack-101-how-to-setup-openstack_12.html"
	echo "http://docs.openstack.org/havana/install-guide/install/apt-debian/content/"
	echo "_________00.2"
	echo "Swift can be used to store data with high redundancy. The nodes in Swift can be broadly classified in two categories:"
	echo "	Proxy Node: This is a public facing node. It handles all the http request for various Swift operations like uploading, managing and modifying metadata. We can setup multiple proxy nodes and then load balance them using a standard load balancer."
	echo "	Storage Node: This node actually stores data. It is recommended to make this node private, only accessible via proxy node but not directly. Other than storage service, this node also houses container service and account service which are used for managing mapping of containers and accounts respectively. "
	echo "For a small scale setup, both proxy and storage node can reside on the same machine but avoid doing so for a bigger setup."
	echo "_________00.3"
	echo "to exit \"vi\" editer : press Esc (on Android this is \"volume up\"+\"e\")"
	echo "then : Press \" : \" (colon). The cursor should reappear at the lower left corner of the screen beside a colon prompt."
	echo "Enter the following:"
	echo "	Input - q! - to exit without saving"
	echo "	Input - ZZ - to exit with saving"
} 
part01_installPackages () { 
	echo "_________01.1"
	apt-get install openstack-swift
	apt-get install openstack-swift-proxy
	apt-get install openstack-swift-account
	apt-get install openstack-swift-container
	apt-get install openstack-swift-object
	apt-get install memcached
	echo "_________01.2"
} 
part02_diskSpace () { 
	echo "_________02.1"
	echo "There are two options avaiable for dedicating space for swift to use for storage."
	echo "Option 1 sets up a partition in your : /dev : directory named : sdb : and likely is best if you've set up a large partition for Linux originaly."
	echo "Option 2 sets up a file in your temp directory and is best for \"proof-of-consept\" progects"
	echo "_________02.2"
	echo -n "Which would you like to preform? [1/2] "
	read ui_swiftStorage
	if [ $ui_swiftStorage = 1 ]
	then
		echo "_________02.2a"
		fdisk /dev/sdb
		mkfs.xfs /dev/sdb1
		echo "/dev/sdb1 /srv/node/partition1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
		mkdir -p /srv/node/partition1
		mount /srv/node/partition1
		echo "_________02.3a"
	elif [ $ui_swiftStorage = 2 ]
	then 
		echo "_________02.2b"
		echo -n "How much space are you dedicating to swift, be sure to include letters? [1G/512MB] "
		read ui_storageSize
		echo "_________02.3b"
		truncate --size=$ui_storageSize /tmp/swiftstorage
		DEVICE=$(losetup --show -f /tmp/swiftstorage)
		mkfs.ext4 $DEVICE
		mkdir -p /srv/node/partition1
		mount $DEVICE /srv/node/partition1 -t ext4 -o noatime,nodiratime,nobarrier,user_xattr
		echo "_________02.4b"
	else [ $ui_swiftStorage = * ]
	echo "Invalid input recived."
	exit
} 
part03_replicateRsync () { 
	echo "_________03.1"
	echo "Setup rsync to replicate the objects."
	echo "In case replication or redundancy is not required, then this step can be skipped."
	echo "However if setting up for something permenat is sugested."
	{ 
		read -r -p "Do you wish to set up rsync? [Y/n]" response
		case "$response" in
			[yY][eE][sS]|[yY])
		# if yes, then start risking changes
				echo "_________03.2"
				echo "please edit the following file to include the following line"
				echo "RSYNC_ENABLE = true"
				echo "Note that there can be multiple account, container and object sections if you wish to use multiple disks or partitions."
				echo "Further more if you have USB OTG on your Android device and proper cable adapters, you may set this up on an external USB drive."
				vi /etc/default/rsync
				echo "_________03.3"
				service rsync start
				echo "_________03.4"
				;;
			*)
		#		 Otherwise exit..
			echo "moving on then."
			;;
		esac
		} 
	echo "_________03.5"
} 
part04_proxy () { 
	echo "_________04.1"
	Opening : /etc/swift/proxy-server.conf : so you may edit the [filter:authtoken] as shown below:"
	echo "Keep in mind that the admin token, admin_tenant_name and admin_user should be same which was used while setting up Keystone."
	echo "_________"
	echo "	[filter:authtoken]"
	echo "	paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory"
	echo "	admin_tenant_name = admin"
	echo "	admin_user = admin"
	echo "	admin_password = ADMIN_PASS"
	echo "	auth_host = 127.0.0.1"
	echo "	auth_port = 35357"
	echo "	auth_protocol = http"
	echo "	signing_dir = /tmp/keystone-signing-swift"
	echo "_________"
	echo "_________04.2"
	vi /etc/swift/proxy-server.conf
	echo "_________04.3"
} 
part05_rings () { 
	echo "_________05.1"
	echo "Rings are mappings between the storage node components and the actual physical drive."
	echo "	Note that the create commands below has 3 numeric parameters in the end."
	echo "	The first parameter signifies the number of the swift partitions (not same as the disk partitions)."
	echo "	Higher number of partitions ensure even distribution but also higher number of partitions put higher strain on the server."
	echo "	So we have to find a good trade off. The rule of thumb is to create about 100 swift partitions per drive."
	echo "	For that the first numeric parameter would be 7 which is (2^7=128, closest to 100)."
	echo "	The second parameter defines the number of copies to create for the sake of replication."
	echo "	For a small instance with no rsync, set it to one but recommended is three."
	echo "	Last number is the time in hours before a specific partition can be moved in succession."
	echo "	Set it to a low number for testing but 24 is recommended for production instances."
	echo "_________05.2"
	echo "The defaults for testing are:"
	echo "_________"
	echo "swift-ring-builder account.builder create 7 1 1"
	echo "swift-ring-builder container.builder create 7 1 1"
	echo "swift-ring-builder object.builder create 7 1 1"
	echo "_________"
	echo -n "Please set the number of the swift partitions [First number] : "
	read ui_partitions
	echo -n "Please set the number of copies to create for the sake of replication [Second number] : "
	read ui_replication
	echo -n "Please set the time in hours before a specific partition can be moved in succession [Third number] : "
	read ui_experation
	echo "_________05.3"
	cd /etc/swift
	swift-ring-builder account.builder create $ui_partitions $ui_replication $ui_experation
	swift-ring-builder container.builder create $ui_partitions $ui_replication $ui_experation
	swift-ring-builder object.builder create $ui_partitions $ui_replication $ui_experation
	echo "_________05.4"
	echo "Add the device created above to the ring:"
	echo "The defaults given fron the guide are:"
	echo "_________"
	echo "swift-ring-builder account.builder add z1-127.0.0.1:6002/partition1 100"
	echo "swift-ring-builder container.builder add z1-127.0.0.1:6001/partition1 100"
	echo "swift-ring-builder object.builder add z1-127.0.0.1:6000/partition1 100"
	echo "_________"
	echo "_________05.5"
	echo "Your - inernet IPv4 - is : $IP_inet_addr"
	echo "Your - broadcast IP - is : $IP_Bcast_addr"
	echo "Your - mask IP - is : $IP_Mask_addr"
	echo "Your - internet IPv6 - is : $IP_inet6_addr"
	echo "Your - local IP - is : $IP_local"
	echo "The - live IPs - on your network are : $fLive_IPs"
	echo -n "How many swift partitions have you set up? "
	read ui_swiftPartitions
	echo "_________05.6"
	echo -n "What IP would you like to set for account.builder? "
	read ui_accountBuilderIP
	echo -n "What port would you like to set for account.builder? "
	read ui_accountBuilderPort
	echo "_________05.7"
	echo -n "What IP would you like to set for container.builder? "
	read ui_containerBuilderIP
	echo -n "What port would you like to set for container.builder? "
	read ui_containerBuilderPort
	echo "_________05.8"
	echo -n "What IP would you like to set for object.builder? "
	read ui_objectBuilderIP
	echo -n "What port would you like to set for object.builder? "
	read ui_objectBuilderPort
	echo "_________05.9"
	swift-ring-builder account.builder add z1-$ui_accountBuilderIP:$ui_accountBuilderPort/partition1 $ui_swiftPartitions
	swift-ring-builder container.builder add z1-$ui_containerBuilderIP:$ui_containerBuilderPort/partition1 $ui_swiftPartitions
	swift-ring-builder object.builder add z1-$ui_objectBuilderIP:$ui_objectBuilderPort/partition1 $ui_swiftPartitions
	echo "_________05.10"
	echo "Rebalancing the ring. This will ensure even distribution and minimal partition moves."
	swift-ring-builder account.builder rebalance
	swift-ring-builder container.builder rebalance
	swift-ring-builder object.builder rebalance
	echo "_________05.11"
	echo "Setting the owner and the group for the partitions"
	chown -R swift:swift /etc/swift /srv/node/partition1
	echo "_________05.12"
} 
part06_endPoint () { 
	echo "_________06.1"
	echo "Creating the service and end point using Keystone."
	keystone service-create --name=swift --type=object-store --description="Object Store Service"
	echo "_________06.2"
	echo "Populating : keystone endpoint-create : command with your input..."
	echo -n "What is the ID in the above output? "
	read ui_keystoneID
	echo -n "The default for : --publicurl : is : http://127.0.0.1:8080/v1 : you may change this now or input the default - "
	read ui_publicurl
	echo -n "The default for : --adminurl : is : http://127.0.0.1:8080/v1 : you may change this now or input the default - "
	read ui_adminurl
	echo -n "The default for : --internalurl : is : http://127.0.0.1:8080/v1 : you may change this now or input the default - "
	read ui_internalurl
	echo "_________06.3"
	keystone endpoint-create --region RegionOne --service_id $ui_keystoneID --publicurl "$ui_publicurl/v1/AUTH_\$(tenant_id)s" --adminurl $ui_adminurl --internalurl $ui_internalurl
	echo "_________06.4"
} 
part07_service_testStart () { 
	echo "_________07.1"
	echo "Starting the services and testing it"
	echo "_________07.2"
	echo "Populating the following commands with your input..."
	echo -n "The default for : swift -V 2.0 -A : is : http://127.0.0.1:5000/v2.0 : you may change this now or input the default - "
	read ui_swift_adminIP
	echo -n "The default for : swift -V 2.0 -A $ui_swift_adminIP -U : is : admin : you may change this now or input the default - "
	read ui_adminName
	echo "_________07.3"
	service memcached start
	for srv in account container object proxy  ; do sudo service openstack-swift-$srv start ; done
	swift -V 2.0 -A $ui_swift_adminIP -U $ui_adminName -K pass stat
	echo "_________07.4"
	echo "Uploading a file : abc.txt : to a Swift container : myfiles like this:"
	echo "swift -V 2.0 -A $ui_swift_adminIP -U $ui_adminName -K pass upload myfiles abc.txt"
	swift -V 2.0 -A $ui_swift_adminIP -U $ui_adminName -K pass upload myfiles abc.txt
	echo "_________07.5"
} 
echo "Starting script..."
{ 
read -r -p "Do you wish to proced? [Y/n] " response
case "$response" in
	[yY][eE][sS]|[yY])
 # if yes, then start risking changes
		part00_readme
		part01_installPackages
		part02_diskSpace
		part03_replicateRsync
		part04_proxy
		part05_rings
		part06_endPoint
		part07_service_testStart
		;;
	*)
 #		 Otherwise exit..
	echo "Try again? exiting.."
	exit 
	;;
esac
} 
echo "End of script. Exiting now..."
exit
# notes and credits
# used PDF from following location
# http://docs.openstack.org/havana/install-guide/install/apt-debian/content/
# http://blog.adityapatawari.com/2014/01/openstack-101-how-to-setup-openstack_12.html?m=1

