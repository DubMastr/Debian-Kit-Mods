install_uiSource () { 
	cd $ui_Download_Directory
	install_sourceCPUMiner_autogen
	$ui_configure CFLAGS="$ui_cflag"
	$ui_make
} 

install_sourceCPUMiner_autogen () { 
	if [ $sourceTarOrGit = git ]
	then
		$ui_git clone $gitSource
		sourcePermmision_fixer
		cd $sourceDirectory
		$ui_autogen
	elif [ $sourceTarOrGit = tar ]
	then
		cd $sourceDirectory
		wget $gitSource
		tar -xvf $sourceDirectory*
		cd $sourceDirectory
	elif [ $sourceTarOrGit = zip ]
	then
		cd $sourceDirectory
		wget $gitSource
		unzip $sourceDirectory*
		cd $sourceDirectory
	else 
		echo "Invalid input recieved, exiting now..."
		exit
	fi
	
} 

setDownloadSource () { 
	echo "For CPU mining there are many forks of the original, link found bellow, that have epanded fetuers."
	echo "	https://github.com/pooler/cpuminer"
	echo "	for mining coins like bitcoin and litecoin any option should be able to be used"
	echo "	however for mining coins not based on SHA-256 or Scypt cryptocoin, however, algorithms based on X11 or others you will want to choose wizely"
	echo "_________"
	echo "For coins based on SHA-256 or Scrypt algorithms~"
	echo "	Input - minerd1 - For Bitcoin and Litecoin CPU Miner from : https://github.com/pooler/cpuminer"
	echo " 	Input - minerd2 - For Bitcoin and Litecoin CPU Miner from : http://sourceforge.net/projects/cpuminer/files/pooler-cpuminer-2.4.tar.gz"
	
	echo "_________"
	echo "For coins based on X11 algorithms~"
	echo "	Input - dark1 - For Darkcoin from : https://github.com/ig0tik3d/darkcoin-cpuminer-1.2c"
	echo "	Input - dark2 - For Darkcoin with AES-NI instruction set suport from : https://github.com/elmad/darkcoin-cpuminer-1.3-avx-aes"
	echo "	Input - x11_1 - For alternet X11 CPU Miner from : https://github.com/ig0tik3d/xcoin-cpuminer"
	
	echo "_________"
	echo "For coins based on Scrypt-N algorithms~"
	echo "	Input - vert1 - For Vertcoin CPU Miner from : https://github.com/Bufius/cpuminer-vert"
	
	echo "_________"
	echo "	Input - quark1 - For QuarkCoin CPU Miner from : https://github.com/Neisklar/quarkcoin-cpuminer.git"
	
	echo "	Input - qubit1 - For QubitCoin CPU Miner from : https://github.com/qubitcoin/QubitCoin-cpuminer"

	echo -n "Choose your source : "
	read ui_gitSource
	if [ $ui_gitSource = minerd1 ]
	then
		gitSource="https://github.com/pooler/cpuminer"
		sourceDirectory="cpuminer"
		sourceTarOrGit="git"
	elif [ $ui_gitSource = minerd2 ]
	then
		gitSource="http://sourceforge.net/projects/cpuminer/files/pooler-cpuminer-2.4.tar.gz"
		sourceDirectory="pooler-cpuminer-2.4"
		sourceTarOrGit="tar"
	elif [ $ui_gitSource = dark1 ]
	then
		gitSource="https://github.com/ig0tik3d/darkcoin-cpuminer-1.2c"
		sourceDirectory="darkcoin-cpuminer-1.2c"
		sourceTarOrGit="git"
	elif [ $ui_gitSource = dark2 ]
	then
		gitSource="https://github.com/elmad/darkcoin-cpuminer-1.3-avx-aes"
		sourceDirectory="darkcoin-cpuminer-1.3-avx-aes"
		sourceTarOrGit="git"
	elif [ $ui_gitSource = x11_1 ]
	then
		gitSource="https://github.com/ig0tik3d/xcoin-cpuminer"
		sourceDirectory="xcoin-cpuminer"
		sourceTarOrGit="git"
	elif [ $ui_gitSource = vert1 ]
	then
		gitSource="https://github.com/Bufius/cpuminer-vert"
		sourceDirectory="cpuminer-vert"
		sourceTarOrGit="git"
	elif [ $ui_gitSource = quark1 ]
	then 
		gitSource="https://github.com/Neisklar/quarkcoin-cpuminer.git"
		sourceDirectory="quarkcoin-cpuminer.git"
		sourceTarOrGit="git"



	elif [ $ui_gitSource = qubit1 ]
	then
		gitSource="https://github.com/qubitcoin/QubitCoin-cpuminer"
		sourceDirectory="QubitCoin-cpuminer"
		sourceTarOrGit="git"
	else 
		echo "Invalid input recived, exiting now..."
		exit
	fi
	echo "Download set to"
	echo "$gitSource"
	echo "$sourceDirectory"
} 



dependsChooser () { 
	if [ $ui_gitSource = minerd1 ]
	then
		list_aptPackages_cpuminer
		dependsInstall_cpuminer
	elif [ $ui_gitSource = minerd2 ]
	then
		list_aptPackages_cpuminer
		list_aptPackages_cpuminer_tar
		dependsInstall_cpuminer
		dependsInstall_cpuminer_tar
	elif [ $ui_gitSource = dark1 ]
	then
		list_aptPackages_cpuminer
		list_aptPackages_darkcoin
		dependsInstall_cpuminer
		dependsInstall_darkcoin
	elif [ $ui_gitSource = dark2 ]
	then
		list_aptPackages_cpuminer
		list_aptPackages_darkcoin
		dependsInstall_cpuminer
		dependsInstall_darkcoin
	elif [ $ui_gitSource = x11_1 ]
	then
		list_aptPackages_cpuminer
		list_aptPackages_xcoin
		dependsInstall_cpuminer
		dependsInstall_xcoin
	elif [ $ui_gitSource = vert1 ]
	then
		list_aptPackages_cpuminer
		list_aptPackages_vertcoin
		dependsInstall_cpuminer
		dependsInstall_vertcoin
	elif [ $ui_gitSource = quark1 ]
	then 
		list_aptPackages_cpuminer
		list_aptPackages_quarkcoin
		dependsInstall_cpuminer
		dependsInstall_quarkcoin
		
	elif [ $ui_gitSource = qubit1 ]
	then
		list_aptPackages_cpuminer
		
		dependsInstall_cpuminer
		
	else 
		echo "Invalid input recived, exiting now..."
		exit
	fi
} 
algoChooser () { 
	if [ $ui_gitSource = minerd1 ]
	then
		echo -n "Input the algorithem to use : "
		read ui_Algo
		ui_mineAlgo="$ui_Algo"
	elif [ $ui_gitSource = dark1 ]
	then
		ui_mineAlgo="X11"
	elif [ $ui_gitSource = dark2 ]
	then
		ui_mineAlgo="X11"
	elif [ $ui_gitSource = x11_1 ]
	then
		ui_mineAlgo="X11"
	elif [ $ui_gitSource = vert1 ]
	then
		ui_mineAlgo="scrypt"
	elif [ $ui_gitSource = qubit1 ]
	then
		echo -n "Input the algorithem to use : "
		read ui_Algo
		ui_mineAlgo="$ui_Algo"
	else 
		echo -n "Input the algorithem to use : "
		read ui_Algo
		ui_mineAlgo="$ui_Algo"
	fi
} 

