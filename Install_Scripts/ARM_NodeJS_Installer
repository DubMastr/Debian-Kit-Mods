#!/bin/bash
nJS_nameScript=ARM_NodeJS_Installer
 : ${USER?} ${HOME?} 
echo "finding the name of $nJS_nameScript and store it to a variable"
nJS_fullScriptPath="$(readlink -f $0)"
# delete last componit from this script and store to another variable
nJS_ScriptDirectory="$(dirname $nJS_fullScriptPath)"
# print curent working directory then print the newly set variables
echo "Your curent working directory is : $PWD"
echo "The name of this script is : $nJS_fullScriptPath"
echo "The path to this script is : $nJS_ScriptDirectory"
echo "setting componit path variable"
nJS_componitPath=$nJS_ScriptDirectory/Components/nJS_Installer
nJS_downloadPath=$nJS_ScriptDirectory/Download
nJS_HF_Download=http://nodejs.org/dist/v0.10.2/node-v0.10.2-linux-arm-pi.tar.gz
nJS_SF_Download=https://github.com/downloads/TooTallNate/node/node-v0.8.9-pre-arm
# set maintenance variables
nJS_targetFile=node-v0.10.2-linux-arm-pi.tar.gz
nJS_minSize=9000
nJS_HF_Version=v0.10.2
nJS_Path=$HOME/ARM_Mod/nodejs
nJS_bashPath=$nJS_Path/node-v0.10.2-linux-arm-pi
pathinto_bashrc=$HOME/.bashrc
echo "Use $nJS_nameScript to install NodeJS to your ARM Linux OS"
echo "0 - exit"
echo "1 - run node.js hard float Installer [untested]"
echo "2 - run node.js soft float Installer [untested]"
echo "3 - run node.js install with apt-get [tested]"
read -r -p "Which one would you like to do? " response
	if [ $response = 1 ] 
then 
#		 $NF_Componit_Path/Nodejs_Installer 
#		 download and extract node.js to $njs_Path
		cd $nJS_Path
		wget -N $nJS_HF_Download
#		 check if download sucseeded and if not wait a few seconds and try again"
		njs_trueSize=$(du -b "$nJS_targetFile" | cut -f 1)
		if [ $nJS_trueSize -ge $nJS_minSize ]; then
			echo "seems ok, moving on to extracting"
			find $nJS_Path -type f -iname '*$nJS_HF_Version*' -print0 | xargs -0 tar -xvzf
			else
			echo "oh no something did not go ok, trying again in a few seconds"
			rm $nJS_targetFile
			sleep 30 && wget -N $nJS_HF_Download
			find $nJS_Path -type f -iname '*$nJS_HF_Version*' -print0 | xargs -0 tar -xvzf
		fi
		cd ~
#		 append bashrc file to include the following so nodejs can be called from other programs
		echo '
#		 path to nodejs
		NODE_JS_HOME=$njs_bashPath
		PATH=\$PATH:\$NODE_JS_HOME/bin' | sudo tee -a $pathinto_bashrc

	elif [ $response = 2 ] 
then 
		echo "this has yet to be tested"
#		https://github.com/itwars/Nodejs-ARM-builder
#		https://github.com/downloads/TooTallNate/node/node-v0.8.9-pre-arm
		mkdir -p $nJS_downloadPath
		cd $nJS_downloadPath
		git clone https://github.com/itwars/Nodejs-ARM-builder
		cd ~
		sudo sh $nJS_downloadPath/Nodejs-ARM-builder/cross-compiler.sh
		echo "exiting now"
		echo exit 
	elif [ $response = 3 ] 
then 
		echo "using apt-get to install node.js requires sid list to be temperaraly added"
		echo "deb ftp://ftp.dk.debian.org/debian/ sid main" | sudo tee /etc/apt/sources.list.d/sid.list
		echo "__________________"
#		 from Crunchbang
		echo "updating keys"
		sudo apt-get update 2> /tmp/keymissing; for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); do echo -e "nProcessing key: $key"; gpg --keyserver keys.gnupgp.net --recv $key && gpg --export --armor $key | sudo apt-key add -; done
		echo "__________________"
		echo "installing node.js"
		echo "note though that lib6-dev may cause services to re-start though upon installation"
		echo "__________________" && sleep 10
		sudo apt-get install libc6-dev
#		sudo apt-get install python-pkg-resorces
		sudo apt-get install -y nodejs
		sudo apt-get install -y npm
		echo "__________________"
		echo "removing sid.list"
		sudo rm -rI /etc/apt/sources.list.d/sid.list
		echo "__________________"
		echo exit
	elif [ $response = 0 ] 
then 
		echo "exiting now"
		echo exit 
		exit 
	else [ $response = * ] then 
#	 if anything else then exit 
		echo "exiting now"
		echo exit 
		exit 
	fi
echo "now that that is done you may now use npm to install more goodies"
echo "to your ARM Linux OS"
echo "For example respond 1 to install NoFlo or respond 2 to install phonegap"
read -r -p "Which one thing would you like to do? " response
	if [ $response = 1 ] 
then 
		echo "installing NoFlo"
		npm install noflo
		echo "exiting now"
		echo exit 
	elif [ $response = 2 ] 
then 
		echo "Installing PhoneGap"
		npm install phonegap
		echo "exiting now"
		echo exit 
	elif [ $response = 3 ] 
		echo "this has yet to be writen"
		echo exit
	elif [ $response = 0 ] 
then 
		echo "this has yet to be writen"
		echo "exiting now"
		echo exit 
		exit 
	else [ $response = * ] then 
#	 if anything else then exit 
		echo "exiting now"
		echo exit 
		exit 
	fi
echo exit
