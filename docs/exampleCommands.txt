#!/bin/bash
PATH=/bin:/usr/bin:/usr/local/bin ; export PATH 
umask 022 		# Files that the script creates will have 755 permission.
# Thanks to Ian D. Allen, for this tip.

	add the following to android scripts to ensure that BusyBox is used too
PATH=/bin:/usr/bin:/usr/local/xbin ; export PATH 

# get external ip from : http://www.shellhacks.com/en/What-is-my-Public-IP-address
wget -q -O - checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'

	for starting an app from the command line on Android
http://stackoverflow.com/questions/5494764/how-to-run-a-specific-android-app-using-terminal
example to send an action with : -a : to application with : -n :
# am start -a com.example.ACTION_NAME -n com.package.name/com.package.name.ActivityName
# or from : https://sites.google.com/site/learncodesnow/
# am start -a android.intent.action.MAIN -n com.iftitah.android.contact/com.iftitah.android.contact.Contact
http://unix.stackexchange.com/questions/74874/pkill-cant-kill-processes-with-parent-process-id-1
# to kill an unresponcive background task use the following
pkill -SIGKILL minerd
# 	to find tasks to kill use the : ps : or : top : commands

#	screen command examples
# start a screen session under a given name and send a command to that newly created terminal within that screen
screen -mS testName echo "hello $USER"
# start a screen session under a given name and send a command to that newly created terminal within that screen and emidieatly detach it so the curent session remains in user view
screen -mSd testName echo "hello $USER"

# reatach with a virtical split
screen -r testName -X V
# reatach with a horizontal split
screen -r testName -X S

# end a screen and it's processes from outside the above screen name
screen -r testName -X quit

#	minerd options:
# mine with -D (degugging) to show more info
./minerd -o stratum+tcp://stratum.give-me-ltc.com:3334 -u worker -p password -D

-o : pool to connect to
-u : your worker name in that pool
-p : password for that worker

#	The usage options:
-a, --algo=ALGO specify the algorithm to use
-o, --url=URL URL of mining server
-O, --userpass=U:P username:password pair for mining server
-u, --user=USERNAME username for mining server
-p, --pass=PASSWORD password for mining server
--cert=FILE certificate for mining server using SSL
-x, --proxy=[PROTOCOL://]HOST[:PORT] connect through a proxy
-t, --threads=N number of miner threads (default: number of processors)
-r, --retries=N number of times to retry if a network call fails
(default: retry indefinitely)
-R, --retry-pause=N time to pause between retries, in seconds (default: 30)
-T, --timeout=N timeout for long polling, in seconds (default: none)
-s, --scantime=N upper bound on time spent scanning current work when
long polling is unavailable, in seconds (default: 5)
--no-longpoll disable X-Long-Polling support
--no-stratum disable X-Stratum support
--no-redirect ignore requests to change the URL of the mining server
-q, --quiet disable per-thread hashmeter output
-D, --debug enable debug output
-P, --protocol-dump verbose dump of protocol-level activities
-S, --syslog use system log for output messages
-B, --background run the miner in the background
--benchmark run in offline benchmark mode
-c, --config=FILE load a JSON-format configuration file
-V, --version display version information and exit.
-h, --help display this help text and exit.

http://webcache.googleusercontent.com/search?q=cache:EiHbDpksWkAJ:https://bitcointalk.org/index.php%3Ftopic%3D55038.0+&cd=1&hl=en&ct=clnk&gl=us
Q: What's the difference between the two available algorithms, scrypt and sha256d?
A: They are completely different proof-of-work algorithms. 
You must use scrypt for Litecoin, and you must use sha256d for Bitcoin. 
The default algorithm is scrypt, 
so for Bitcoin mining you have to specify --algo=sha256d

# example of sed paturn printing
sed -n -e 's/^.*stalled: //p'
someCommand | sed -e 's/BATT: //p'

# for use in scripts
	if [ $ui_AndroidNoAndroid = yes ]
	then
		
	elif [ $ui_AndroidNoAndroid = no ]
	then
		
	else [ $ui_AndroidNoAndroid = * ]
		echo "Invalid input recived, exiting now..."
		exit
	fi

# get battery info from : /sys/class/power_supply : directory.
# command from : http://www.cyberciti.biz/faq/linux-laptop-battery-status-temperature/
	ls -l /sys/class/power_supply/BAT0


	for scp command examples
http://www.tecmint.com/scp-commands-examples/
example : transfer "source_file_name" to user on IP at "destination_folder" with scp
# scp source_file_name username@destination_host:destination_folder
# example scp command : -v : is verbose ... : -p : show estemated time ... : -C : uses compression on non-compressed files ... : -P : customizes the port to be used in connnection ... : -r : When the copy process is done, at the destination server you will found a directory named “documents” with all it’s files.
# scp -Cvp -P 22 source_file_name username@destination_host:destination_folder

	for ssh command examples
http://www.folkstalk.com/2012/07/ssh-command-examples-unix-linux.html?m=1
example : login to remote with : -l : option (note you can logout with : exit )
ssh -l username remote-server
example : send : ls : command to remote and : -v : option is to be verbose about it
ssh -v user@remote-host "ls test"

	for example file not found
http://stackoverflow.com/questions/638975/how-do-i-tell-if-a-file-does-not-exist-in-bash
# [ -f /tmp/foo.txt ] || echo "File not found!"
more examples at
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
	exolution of fast custom pinger. Winner is on top... set : $IPmin $IPmax : and : $trimIP : with help from examples in this script or set manualy with litiral numbers. Note true min is "1" and true max is "254" if setting manualy.
	customPinger=`for ip in $(seq $IPmin $IPmax) ;do (ping -c 1 -w 5 $trimIP$ip >/dev/null && echo "$trimIP$ip" &) ; done`
	source of winning example
http://stackoverflow.com/questions/14038606/fastest-way-to-ping-a-network-range-and-return-responsive-hosts
# for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip>/dev/null; [ $? -eq 0 ] && echo "192.168.1.$ip UP" || : ; done
# for ip in 192.168.1.{1..10}; do ping -t 1 $ip > /dev/null && echo "${ip} is up"; done
# for i in \$(seq 1 254) ;do (ping 192.168.1.\$i -c 1 -w 5 >/dev/null && echo \"192.168.1.\$i\" &) ; done
# for i in {1..254} ;do (ping 192.168.1.$i -c 1 -w 5 >/dev/null && echo "192.168.1.$i" &) ;done

For ls commands
List Files using ls with no option
# ls
Show file or directory, size, modified date and time, file or folder name and owner of file and it’s permission
# ls -l
View Hidden Files
# ls -a
List Files with Human Readable Format
# ls -lh
List Files and Directories with ‘/’ Character at the end
# ls -F
List Files in Reverse Order
# ls -r
Recursively list Sub-Directories
# ls -R
combination of -ltr will show latest modification file or directory date as last.
# ls -lrt
With combination of -lS displays file size in order, will display big in size first.
# ls -lS
Display Inode number of File or Directory
ls -i
With ls -l command list files under directory /tmp. Wherein with -ld parameters displays information of /tmp directory.
# ls -l /tmp
# ls -ld /tmp/
To display UID and GID of files and directories. use option -n with ls command.
# ls -n
~~~~~~
	for write functions in bash
#!/bin/sh
foo 1 
# the above will fail because foo has not been declared yet.
foo() {
	echo "Parameter #1 is $1" 
} 
foo 2 
# the above will work because it has been set now.
~~~~~~
~~~~~~~~~~~~~
writing functions that can see peramiters passed to them from the command line
see : Example 24-4. Passing an indirect reference to a function : http://tldp.org/LDP/abs/html/complexfunct.html : for more
~~~~~~~~~~~~~
#!/bin/bash
# ind-func.sh: Passing an indirect reference to a function.

echo_var ()
{
echo "$1"
}

message=Hello
Hello=Goodbye

echo_var "$message"        # Hello
# Now, let's pass an indirect reference to the function.
echo_var "${!message}"     # Goodbye

echo "-------------"

# What happens if we change the contents of "hello" variable?
Hello="Hello, again!"
echo_var "$message"        # Hello
echo_var "${!message}"     # Hello, again!

exit 0
~~~~~~~~~~~~~
Example 36-18. Return value trickery
~~~~~~~~~~~~~
#!/bin/bash 
# multiplication.sh 
multiply () 				# Multiplies params passed. 
{ 							# Will accept a variable number of args. 
	local product=1 
	until [ -z "$1" ] 		# Until uses up arguments passed... 
	do 
		let "product *= $1" 
		shift 
	done 
	
	echo $product 			# Will not echo to stdout, 
} 							#+ since this will be assigned to a variable. 

mult1=15383; mult2=25211 
val1=`multiply $mult1 $mult2` 
# Assigns stdout (echo) of function to the variable val1. 
echo "$mult1 X $mult2 = $val1" 						# 387820813 

mult1=25; mult2=5; mult3=20 
val2=`multiply $mult1 $mult2 $mult3` 
echo "$mult1 X $mult2 X $mult3 = $val2" 			# 2500 

mult1=188; mult2=37; mult3=25; mult4=47 
val3=`multiply $mult1 $mult2 $mult3 $mult4` 
echo "$mult1 X $mult2 X $mult3 X $mult4 = $val3" 	# 8173300 

exit 0
~~~~~~~~~~~~~
Example 36-20. Passing and returning arrays
http://tldp.org/LDP/abs/html/assortedtips.html#MULTIPLICATION
~~~~~~~~~~~~~
#!/bin/bash 
# array-function.sh: Passing an array to a function and ... 
# 					"returning" an array from a function 


Pass_Array () 
{ 
	local passed_array 				# Local variable! 
	passed_array=( `echo "$1"` ) 
	echo "${passed_array[@]}" 
	# List all the elements of the new array 
	#+ declared and set within the function. 
} 


original_array=( element1 element2 element3 element4 element5 ) 


echo 
echo "original_array = ${original_array[@]}" 
# 									List all elements of original array. 


# This is the trick that permits passing an array to a function. 
# ********************************** 
argument=`echo ${original_array[@]}` 
# ********************************** 
# 	Pack a variable 
#+ 	with all the space-separated elements of the original array. 
# 
# 	Attempting to just pass the array itself will not work. 


# This is the trick that allows grabbing an array as a "return value". 
# ***************************************** 
returned_array=( `Pass_Array "$argument"` ) 
# ***************************************** 
# Assign 'echoed' output of function to array variable. 


echo "returned_array = ${returned_array[@]}" 

echo "=============================================================" 

# 	Now, try it again, 
#+ 	attempting to access (list) the array from outside the function. 
Pass_Array "$argument" 

# 	The function itself lists the array, but ... 
#+ 	accessing the array from outside the function is forbidden. 
echo "Passed array (within function) = ${passed_array[@]}" 
# NULL VALUE since the array is a variable local to the function. 

echo 

############################################ 

# And here is an even more explicit example: 

ret_array () { 
	for element in {11..20} 
	do 
		echo "$element " 	# Echo individual elements 
		done 				#+ of what will be assembled into an array. 
	} 
arr=( $(ret_array) ) 		# Assemble into array. 
echo "Capturing array \"arr\" from function ret_array () ..." 
echo "Third element of array \"arr\" is ${arr[2]}." 	# 13 (zero-indexed) 
echo -n "Entire array is: " 
echo ${arr[@]} 				# 11 12 13 14 15 16 17 18 19 20 

echo 

exit 0 
# Nathan Coulter points out that passing arrays with elements containing 
#+ whitespace breaks this example.
~~~~~~~~~~~~~

Count only line numbers of a file
sed = $fIP_savePath/testFunction_runTime_variables.sh | grep -E "^[1-9]"

# examples and credits

# http://www.linuxquestions.org/questions/linux-newbie-8/using-tar-how-to-exclude-list-of-directories-893787/
# exclude directories from tar command with a file that lists the directories to exclude (one per line)
# --exclude-from=/PATH_TO/exclude.txt

# http://www.unix.com/shell-programming-scripting/67831-replace-space-new-line.html
# replace spaces with new line
# tr ' ' '\n' < myFile

# http://www.aboutdebian.com/tar-backup.htm
# backup everything but excluded directories to a file named : fullbackup.tar.gz
# tar -zcvpf /backups/fullbackup.tar.gz --directory=/ --exclude=proc --exclude=sys --exclude=dev/pts --exclude=backups .
# restore that backup 
# tar -zxvpf /fullbackup.tar.gz
#+	note when backing up and restoring: be sure to be in the same directory tree level on the restoring system.

# http://stackoverflow.com/questions/1605232/use-bash-to-read-a-file-and-then-execute-a-command-from-the-words-extracted
# take a list of words/comands from a file with each on a new line and run them with a command and or save to a new file for latter running.
#for WORD in `cat FILE`
#do
#   echo $WORD
#   command $WORD > $WORD
#done

# http://www.unix.com/shell-programming-scripting/75038-grep-inside-zip-file.html
# grep for patterns within a compressed file without having to un-compress it first.
# zgrep 'meter number' file*.zip


